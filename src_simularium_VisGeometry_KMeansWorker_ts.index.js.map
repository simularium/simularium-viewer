{"version":3,"file":"src_simularium_VisGeometry_KMeansWorker_ts.index.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;;IAEME;;;;;;;;uLACF,iBAAUC,CAAV,EAAaC,KAAb,EAAoBC,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AACUC,gBAAAA,OADV,GACoC,EADpC;;AAEI,qBAASC,CAAT,GAAa,CAAb,EAAgBA,CAAC,GAAGH,KAAK,CAACI,MAA1B,EAAkC,EAAED,CAApC,EAAuC;AAC7BE,kBAAAA,GAD6B,GACvB,IAAIR,wDAAJ,CAAa;AAAEE,oBAAAA,CAAC,EAAEC,KAAK,CAACG,CAAD,CAAV;AAAeF,oBAAAA,IAAI,EAAEA;AAArB,mBAAb,CADuB;AAEnCC,kBAAAA,OAAO,CAACI,IAAR,CAAaD,GAAG,CAACE,KAAjB;AACH;;AALL,iDAMWL,OANX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;AAYJN,2CAAA,CAAeE,YAAf;;;;;;;;;;;;;;;;;;;;;;;ACRA;AACA,SAASW,cAAT,CAAwBC,CAAxB,EAA2BC,CAA3B,EAA8BC,OAA9B,EAAgD;AAC5C,OAAK,IAAIT,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGO,CAAC,CAACN,MAAtB,EAA8B,EAAED,CAAhC,EAAmC;AAC/B,QAAIU,IAAI,CAACC,GAAL,CAASJ,CAAC,CAACP,CAAD,CAAD,GAAOQ,CAAC,CAACR,CAAD,CAAjB,IAAwBS,OAA5B,EAAqC;AACjC,aAAO,KAAP;AACH;AACJ;;AACD,SAAO,IAAP;AACH;;AAED,SAASG,OAAT,CAAiBC,GAAjB,EAA8B;AAC1B,MAAIC,CAAC,GAAGC,MAAM,CAACC,SAAf;;AACA,OAAK,IAAIhB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGa,GAAG,CAACZ,MAAxB,EAAgC,EAAED,CAAlC,EAAqC;AACjC,QAAIa,GAAG,CAACb,CAAD,CAAH,GAASc,CAAb,EAAgB;AACZA,MAAAA,CAAC,GAAGD,GAAG,CAACb,CAAD,CAAP;AACH;AACJ;;AACD,SAAOc,CAAP;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;IACqBG;AAYjB,kBAAmBC,IAAnB,EAAwC;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AACpC;AACA,SAAKtB,CAAL,GAASsB,IAAI,CAACtB,CAAd,CAFoC,CAIpC;;AACA,SAAKuB,YAAL,GAAoB,IAAIC,YAAJ,CAAiB,KAAKxB,CAAtB,CAApB,CALoC,CAOpC;;AACA,SAAKE,IAAL,GAAYoB,IAAI,CAACpB,IAAjB,CARoC,CAUpC;AACA;;AACA,SAAKuB,WAAL,GAAmB,IAAIC,UAAJ,CAAe,KAAKxB,IAAL,CAAUG,MAAV,GAAmB,CAAlC,CAAnB,CAZoC,CAcpC;;AACA,SAAKsB,OAAL,GAAe,KAAKC,oBAAL,CAA0B,KAAK1B,IAA/B,CAAf,CAfoC,CAiBpC;;AACA,SAAK2B,MAAL,GAAc,KAAKC,gBAAL,EAAd,CAlBoC,CAoBpC;;AACA,SAAKtB,KAAL,GAAaa,MAAM,CAACU,WAAP,CAAmB,KAAK/B,CAAxB,EAA2B,KAAKE,IAAhC,CAAb,CArBoC,CAuBpC;;AACA,SAAK8B,UAAL,GAAkB,CAAlB,CAxBoC,CA0BpC;;AACA,SAAKC,SAAL,GAAiB,CAAjB,CA3BoC,CA6BpC;;AACA,SAAKC,KAAL,GAAa,CAAC,CAAd;AACA,SAAKC,GAAL;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;WAEI,8BAA4BjC,IAA5B,EAA0D;AACtD;AACA,UAAMyB,OAAO,GAAG,CACZ,OADY,EACH,OADG,EACM,OADN,EACe,CAAC,OADhB,EACyB,CAAC,OAD1B,EACmC,CAAC,OADpC,CAAhB;;AAIA,WAAK,IAAIvB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,IAAI,CAACG,MAAL,GAAc,CAAlC,EAAqCD,CAAC,EAAtC,EAA0C;AACtC,YAAMgC,CAAC,GAAGlC,IAAI,CAACE,CAAC,GAAG,CAAL,CAAd;AACA,YAAMiC,CAAC,GAAGnC,IAAI,CAACE,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAAd;AACA,YAAMkC,CAAC,GAAGpC,IAAI,CAACE,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAAd;;AACA,YAAIgC,CAAC,GAAGT,OAAO,CAAC,CAAD,CAAf,EAAoB;AAChBA,UAAAA,OAAO,CAAC,CAAD,CAAP,GAAaS,CAAb;AACH;;AACD,YAAIA,CAAC,GAAGT,OAAO,CAAC,CAAD,CAAf,EAAoB;AAChBA,UAAAA,OAAO,CAAC,CAAD,CAAP,GAAaS,CAAb;AACH;;AACD,YAAIC,CAAC,GAAGV,OAAO,CAAC,CAAD,CAAf,EAAoB;AAChBA,UAAAA,OAAO,CAAC,CAAD,CAAP,GAAaU,CAAb;AACH;;AACD,YAAIA,CAAC,GAAGV,OAAO,CAAC,CAAD,CAAf,EAAoB;AAChBA,UAAAA,OAAO,CAAC,CAAD,CAAP,GAAaU,CAAb;AACH;;AACD,YAAIC,CAAC,GAAGX,OAAO,CAAC,CAAD,CAAf,EAAoB;AAChBA,UAAAA,OAAO,CAAC,CAAD,CAAP,GAAaW,CAAb;AACH;;AACD,YAAIA,CAAC,GAAGX,OAAO,CAAC,CAAD,CAAf,EAAoB;AAChBA,UAAAA,OAAO,CAAC,CAAD,CAAP,GAAaW,CAAb;AACH;AACJ;;AAED,aAAOX,OAAP;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACI,4BAAoC;AAChC,aAAO,CACH,KAAKA,OAAL,CAAa,CAAb,IAAkB,KAAKA,OAAL,CAAa,CAAb,CADf,EAEH,KAAKA,OAAL,CAAa,CAAb,IAAkB,KAAKA,OAAL,CAAa,CAAb,CAFf,EAGH,KAAKA,OAAL,CAAa,CAAb,IAAkB,KAAKA,OAAL,CAAa,CAAb,CAHf,CAAP;AAKH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACI,iBAA6B;AACzB,UAAMnB,KAAK,GAAG,IAAIgB,YAAJ,CAAiB,KAAKxB,CAAL,GAAS,CAA1B,CAAd;;AACA,WAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKJ,CAAzB,EAA4B,EAAEI,CAA9B,EAAiC;AAC7BI,QAAAA,KAAK,CAACJ,CAAC,GAAG,CAAL,CAAL,GAAe,KAAKuB,OAAL,CAAa,CAAb,IAAkBb,IAAI,CAACyB,MAAL,KAAgB,KAAKV,MAAL,CAAY,CAAZ,CAAjD;AACArB,QAAAA,KAAK,CAACJ,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAAL,GAAmB,KAAKuB,OAAL,CAAa,CAAb,IAAkBb,IAAI,CAACyB,MAAL,KAAgB,KAAKV,MAAL,CAAY,CAAZ,CAArD;AACArB,QAAAA,KAAK,CAACJ,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAAL,GAAmB,KAAKuB,OAAL,CAAa,CAAb,IAAkBb,IAAI,CAACyB,MAAL,KAAgB,KAAKV,MAAL,CAAY,CAAZ,CAArD;AACH;;AAED,aAAOrB,KAAP;AACH;;;;AAsBD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,yCAAyC;AACrC,WAAK,IAAIJ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKF,IAAL,CAAUG,MAAV,GAAmB,CAAvC,EAA0CD,CAAC,EAA3C,EAA+C;AAC3C,YAAMgC,CAAC,GAAG,KAAKlC,IAAL,CAAUE,CAAC,GAAG,CAAd,CAAV;AACA,YAAMiC,CAAC,GAAG,KAAKnC,IAAL,CAAUE,CAAC,GAAG,CAAJ,GAAQ,CAAlB,CAAV;AACA,YAAMkC,CAAC,GAAG,KAAKpC,IAAL,CAAUE,CAAC,GAAG,CAAJ,GAAQ,CAAlB,CAAV,CAH2C,CAK3C;;AACA,aAAK,IAAIoC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKhC,KAAL,CAAWH,MAAX,GAAoB,CAAxC,EAA2CmC,CAAC,EAA5C,EAAgD;AAC5C,cAAMC,EAAE,GAAG,KAAKjC,KAAL,CAAWgC,CAAC,GAAG,CAAf,CAAX;AACA,cAAME,EAAE,GAAG,KAAKlC,KAAL,CAAWgC,CAAC,GAAG,CAAJ,GAAQ,CAAnB,CAAX;AACA,cAAMG,EAAE,GAAG,KAAKnC,KAAL,CAAWgC,CAAC,GAAG,CAAJ,GAAQ,CAAnB,CAAX;AAEA;AAChB;AACA;;AAEgB,cAAMI,GAAG,GACL,CAACR,CAAC,GAAGK,EAAL,KAAYL,CAAC,GAAGK,EAAhB,IACA,CAACJ,CAAC,GAAGK,EAAL,KAAYL,CAAC,GAAGK,EAAhB,CADA,GAEA,CAACJ,CAAC,GAAGK,EAAL,KAAYL,CAAC,GAAGK,EAAhB,CAHJ,CAT4C,CAc5C;;AACA,eAAKpB,YAAL,CAAkBiB,CAAlB,IAAuB1B,IAAI,CAAC+B,IAAL,CAAUD,GAAV,CAAvB;AACH,SAtB0C,CAwB3C;AACA;;;AACA,YAAME,UAAU,GAAG9B,OAAO,CAAC,KAAKO,YAAN,CAA1B;AACA,aAAKE,WAAL,CAAiBrB,CAAjB,IAAsB,KAAKmB,YAAL,CAAkBwB,OAAlB,CAA0BD,UAA1B,CAAtB;AACH;AACJ;AAED;AACJ;AACA;AACA;AACA;;;;WACI,qBAA4B;AACxB;AACA,UAAME,IAAI,GAAG,IAAIxB,YAAJ,CAAiB,KAAKhB,KAAL,CAAWH,MAA5B,EAAoC4C,IAApC,CAAyC,CAAzC,CAAb;AACA,UAAMC,MAAM,GAAG,IAAIxB,UAAJ,CAAe,KAAKlB,KAAL,CAAWH,MAAX,GAAoB,CAAnC,EAAsC4C,IAAtC,CAA2C,CAA3C,CAAf;AACA,UAAIE,KAAK,GAAG,KAAZ;AACA,UAAIC,SAAJ;AACA,UAAIC,GAAJ,CANwB,CAQxB;;AACA,WACI,IAAIC,UAAU,GAAG,CADrB,EAEIA,UAAU,GAAG,KAAK7B,WAAL,CAAiBpB,MAFlC,EAGIiD,UAAU,EAHd,EAIE;AACEF,QAAAA,SAAS,GAAG,KAAK3B,WAAL,CAAiB6B,UAAjB,CAAZ;AACA,YAAMC,EAAE,GAAG,KAAKrD,IAAL,CAAUoD,UAAU,GAAG,CAAvB,CAAX;AACA,YAAME,EAAE,GAAG,KAAKtD,IAAL,CAAUoD,UAAU,GAAG,CAAb,GAAiB,CAA3B,CAAX;AACA,YAAMG,EAAE,GAAG,KAAKvD,IAAL,CAAUoD,UAAU,GAAG,CAAb,GAAiB,CAA3B,CAAX;AAEAJ,QAAAA,MAAM,CAACE,SAAD,CAAN;AAEAJ,QAAAA,IAAI,CAACI,SAAS,GAAG,CAAb,CAAJ,IAAuBG,EAAvB;AACAP,QAAAA,IAAI,CAACI,SAAS,GAAG,CAAZ,GAAgB,CAAjB,CAAJ,IAA2BI,EAA3B;AACAR,QAAAA,IAAI,CAACI,SAAS,GAAG,CAAZ,GAAgB,CAAjB,CAAJ,IAA2BK,EAA3B;AACH;AAED;AACR;AACA;;;AACQ,WAAKL,SAAS,GAAG,CAAjB,EAAoBA,SAAS,GAAGJ,IAAI,CAAC3C,MAAL,GAAc,CAA9C,EAAiD+C,SAAS,EAA1D,EAA8D;AAC1D,YAAI,MAAMF,MAAM,CAACE,SAAD,CAAhB,EAA6B;AACzBJ,UAAAA,IAAI,CAACI,SAAS,GAAG,CAAb,CAAJ,GACI,KAAKzB,OAAL,CAAa,CAAb,IAAkBb,IAAI,CAACyB,MAAL,KAAgB,KAAKV,MAAL,CAAY,CAAZ,CADtC;AAEAmB,UAAAA,IAAI,CAACI,SAAS,GAAG,CAAZ,GAAgB,CAAjB,CAAJ,GACI,KAAKzB,OAAL,CAAa,CAAb,IAAkBb,IAAI,CAACyB,MAAL,KAAgB,KAAKV,MAAL,CAAY,CAAZ,CADtC;AAEAmB,UAAAA,IAAI,CAACI,SAAS,GAAG,CAAZ,GAAgB,CAAjB,CAAJ,GACI,KAAKzB,OAAL,CAAa,CAAb,IAAkBb,IAAI,CAACyB,MAAL,KAAgB,KAAKV,MAAL,CAAY,CAAZ,CADtC;AAEA;AACH;;AAEDmB,QAAAA,IAAI,CAACI,SAAS,GAAG,CAAb,CAAJ,IAAuBF,MAAM,CAACE,SAAD,CAA7B;AACAJ,QAAAA,IAAI,CAACI,SAAS,GAAG,CAAb,CAAJ,GAAsBtC,IAAI,CAAC4C,KAAL,CAAW,MAAMV,IAAI,CAACI,SAAS,GAAG,CAAb,CAArB,IAAwC,GAA9D;AACAJ,QAAAA,IAAI,CAACI,SAAS,GAAG,CAAZ,GAAgB,CAAjB,CAAJ,IAA2BF,MAAM,CAACE,SAAD,CAAjC;AACAJ,QAAAA,IAAI,CAACI,SAAS,GAAG,CAAZ,GAAgB,CAAjB,CAAJ,GACItC,IAAI,CAAC4C,KAAL,CAAW,MAAMV,IAAI,CAACI,SAAS,GAAG,CAAZ,GAAgB,CAAjB,CAArB,IAA4C,GADhD;AAEAJ,QAAAA,IAAI,CAACI,SAAS,GAAG,CAAZ,GAAgB,CAAjB,CAAJ,IAA2BF,MAAM,CAACE,SAAD,CAAjC;AACAJ,QAAAA,IAAI,CAACI,SAAS,GAAG,CAAZ,GAAgB,CAAjB,CAAJ,GACItC,IAAI,CAAC4C,KAAL,CAAW,MAAMV,IAAI,CAACI,SAAS,GAAG,CAAZ,GAAgB,CAAjB,CAArB,IAA4C,GADhD;AAEH;AAED;AACR;AACA;AACQ;;;AACA,UAAI,CAAC1C,cAAc,CAAC,KAAKF,KAAN,EAAawC,IAAb,EAAmB,IAAnB,CAAnB,EAA6C;AACzC,YAAIW,IAAJ;AACAR,QAAAA,KAAK,GAAG,IAAR,CAFyC,CAIzC;;AACA,aAAKC,SAAS,GAAG,CAAjB,EAAoBA,SAAS,GAAGJ,IAAI,CAAC3C,MAAL,GAAc,CAA9C,EAAiD+C,SAAS,EAA1D,EAA8D;AAC1D,eAAKC,GAAG,GAAG,CAAX,EAAcA,GAAG,GAAG,CAApB,EAAuBA,GAAG,EAA1B,EAA8B;AAC1BM,YAAAA,IAAI,GACAX,IAAI,CAACI,SAAS,GAAG,CAAZ,GAAgBC,GAAjB,CAAJ,GACA,KAAK7C,KAAL,CAAW4C,SAAS,GAAG,CAAZ,GAAgBC,GAA3B,CAFJ;;AAGA,gBAAIvC,IAAI,CAACC,GAAL,CAAS4C,IAAT,IAAiB,GAArB,EAA0B;AACtB,kBAAMC,iBAAiB,GAAG,EAA1B;AACA,mBAAKpD,KAAL,CAAW4C,SAAS,GAAG,CAAZ,GAAgBC,GAA3B,KACIM,IAAI,GAAGC,iBADX;AAEA,mBAAKpD,KAAL,CAAW4C,SAAS,GAAG,CAAZ,GAAgBC,GAA3B,IACIvC,IAAI,CAAC4C,KAAL,CAAW,MAAM,KAAKlD,KAAL,CAAW4C,SAAS,GAAG,CAAZ,GAAgBC,GAA3B,CAAjB,IACA,GAFJ;AAGH,aAPD,MAOO;AACH,mBAAK7C,KAAL,CAAW4C,SAAS,GAAG,CAAZ,GAAgBC,GAA3B,IACIL,IAAI,CAACI,SAAS,GAAG,CAAZ,GAAgBC,GAAjB,CADR;AAEH;AACJ;AACJ;AACJ;;AAED,aAAOF,KAAP;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;;WACI,eAAmB;AACf,UAAIU,UAAU,GAAG,IAAjB,CADe,CAGf;;AACA,UAAMC,aAAa,GAAG,GAAtB,CAJe,CAKf;;AACA,UAAMC,WAAW,GAAG,IAApB;AAEA,UAAMC,WAAW,GAAGC,IAAI,CAACC,GAAL,EAApB;AACA,UAAIC,IAAI,GAAG,CAAX;;AAEA,SAAG;AACC,UAAE,KAAKnC,UAAP,CADD,CAGC;;AACA,aAAKoC,yBAAL,GAJD,CAMC;;AACAP,QAAAA,UAAU,GAAG,KAAKQ,SAAL,EAAb;AAEAF,QAAAA,IAAI,GAAGF,IAAI,CAACC,GAAL,KAAaF,WAApB;AACH,OAVD,QAWIH,UAAU,IACV,KAAK7B,UAAL,GAAkB8B,aADlB,IAEA,EAAEK,IAAI,GAAGJ,WAAT,CAbJ;AAeH;;;WA1LD,qBAA0B/D,CAA1B,EAAqCE,IAArC,EAAuE;AACnE;AACA,UAAMoE,QAAQ,GAAGpE,IAAI,CAACG,MAAL,GAAc,CAA/B;AACA,UAAMkE,QAAqB,GAAG,IAAIC,GAAJ,EAA9B;;AACA,aACID,QAAQ,CAACE,GAAT,CAAa3D,IAAI,CAAC4D,KAAL,CAAW5D,IAAI,CAACyB,MAAL,KAAgB+B,QAA3B,IAAuC,CAApD,EAAuDK,IAAvD,GAA8D3E,CADlE,EAEE,CAAE;;AACJ,UAAM4E,KAAe,GAAG,kFAAIL,QAAP,CAArB;;AAEA,UAAM/D,KAAK,GAAG,IAAIgB,YAAJ,CAAiBxB,CAAC,GAAG,CAArB,CAAd;;AACA,WAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,CAApB,EAAuB,EAAEI,CAAzB,EAA4B;AACxB;AACAI,QAAAA,KAAK,CAACJ,CAAC,GAAG,CAAL,CAAL,GAAeF,IAAI,CAAC0E,KAAK,CAACxE,CAAD,CAAL,GAAW,CAAZ,CAAnB;AACAI,QAAAA,KAAK,CAACJ,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAAL,GAAmBF,IAAI,CAAC0E,KAAK,CAACxE,CAAD,CAAL,GAAW,CAAX,GAAe,CAAhB,CAAvB;AACAI,QAAAA,KAAK,CAACJ,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAAL,GAAmBF,IAAI,CAAC0E,KAAK,CAACxE,CAAD,CAAL,GAAW,CAAX,GAAe,CAAhB,CAAvB;AACH;;AAED,aAAOI,KAAP;AACH;;;;;;;;;;;;UC9LL;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;;;;WClCA;WACA;WACA;WACA;WACA,+BAA+B,wCAAwC;WACvE;WACA;WACA;WACA;WACA,iBAAiB,qBAAqB;WACtC;WACA;WACA,kBAAkB,qBAAqB;WACvC;WACA;WACA,KAAK;WACL;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;;;;WC3BA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,EAAE;WACF;;;;;WCRA;WACA;WACA;WACA;WACA;;;;;WCJA;WACA;WACA;WACA;WACA;;;;;WCJA;WACA;WACA;WACA;WACA,GAAG;WACH;WACA;WACA,CAAC;;;;;WCPD;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;WCNA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;;;;WCfA;;WAEA;WACA;WACA;WACA;WACA;;WAEA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,aAAa;WACb;WACA;WACA;WACA;;WAEA;WACA;WACA;;WAEA;;WAEA;;;;;WCpCA;WACA;WACA;WACA;;;;;UEHA;UACA","sources":["webpack://@aics/simularium-viewer/./src/simularium/VisGeometry/KMeansWorker.ts","webpack://@aics/simularium-viewer/./src/simularium/VisGeometry/rendering/KMeans3d.ts","webpack://@aics/simularium-viewer/webpack/bootstrap","webpack://@aics/simularium-viewer/webpack/runtime/chunk loaded","webpack://@aics/simularium-viewer/webpack/runtime/compat get default export","webpack://@aics/simularium-viewer/webpack/runtime/define property getters","webpack://@aics/simularium-viewer/webpack/runtime/ensure chunk","webpack://@aics/simularium-viewer/webpack/runtime/get javascript chunk filename","webpack://@aics/simularium-viewer/webpack/runtime/get mini-css chunk filename","webpack://@aics/simularium-viewer/webpack/runtime/global","webpack://@aics/simularium-viewer/webpack/runtime/hasOwnProperty shorthand","webpack://@aics/simularium-viewer/webpack/runtime/make namespace object","webpack://@aics/simularium-viewer/webpack/runtime/publicPath","webpack://@aics/simularium-viewer/webpack/runtime/importScripts chunk loading","webpack://@aics/simularium-viewer/webpack/runtime/startup chunk dependencies","webpack://@aics/simularium-viewer/webpack/before-startup","webpack://@aics/simularium-viewer/webpack/startup","webpack://@aics/simularium-viewer/webpack/after-startup"],"sourcesContent":["import \"regenerator-runtime/runtime\";\nimport * as Comlink from \"comlink\";\n\nimport KMeans3d from \"./rendering/KMeans3d\";\n\nclass KMeansWorker {\n    async run(k, sizes, data) {\n        const results: Float32Array[] = [];\n        for (let i = 0; i < sizes.length; ++i) {\n            const km3 = new KMeans3d({ k: sizes[i], data: data });\n            results.push(km3.means);\n        }\n        return results;\n    }\n}\n\nexport type KMeansWorkerType = typeof KMeansWorker;\n\nComlink.expose(KMeansWorker);\n","interface Extent {\n    min: number;\n    max: number;\n}\n\ninterface KMeansOptions {\n    k: number;\n    data: Float32Array;\n}\n\n// assumes arrays of equal length\nfunction areArraysClose(a, b, epsilon): boolean {\n    for (let i = 0; i < a.length; ++i) {\n        if (Math.abs(a[i] - b[i]) > epsilon) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction findMin(arr): number {\n    let m = Number.MAX_VALUE;\n    for (let i = 0; i < arr.length; ++i) {\n        if (arr[i] < m) {\n            m = arr[i];\n        }\n    }\n    return m;\n}\n\n/**\n * KMeans\n *       This is a ported and optimized version of code explained here:\n *       https://miguelmota.com/blog/k-means-clustering-in-javascript/\n *       https://burakkanber.com/blog/machine-learning-k-means-clustering-in-javascript-part-1/\n *\n * @constructor\n * @desc KMeans constructor\n * @param {object} options - options object\n * @param {array} options.data - data array with points\n * @param {number} options.k - number of cluster centroids\n * @return array with arrays of points\n */\nexport default class KMeans {\n    public k: number;\n    public data: Float32Array;\n    public assignments: Int32Array;\n    public extents: number[];\n    public ranges: number[];\n    public means: Float32Array;\n    public iterations: number;\n    public drawDelay: number;\n    public timer: number;\n    private tmpDistances: Float32Array;\n\n    public constructor(opts: KMeansOptions) {\n        // Number of cluster centroids.\n        this.k = opts.k;\n\n        // one distance per cluster\n        this.tmpDistances = new Float32Array(this.k);\n\n        // Points to cluster.\n        this.data = opts.data;\n\n        // Keeps track of which cluster centroid index each data point belongs to.\n        // each point gets assigned to one cluster (an int between 0 and k-1)\n        this.assignments = new Int32Array(this.data.length / 3);\n\n        // Get the extents (min,max) for the dimensions.\n        this.extents = this.dataDimensionExtents(this.data);\n\n        // Get the range of the dimensions.\n        this.ranges = this.dataExtentRanges();\n\n        // Generate random cluster centroid points.\n        this.means = KMeans.randomSeeds(this.k, this.data);\n\n        // Keep track of number of times centroids move.\n        this.iterations = 0;\n\n        // Delay for each draw iteration.\n        this.drawDelay = 1;\n\n        // Perform work.\n        this.timer = -1;\n        this.run();\n    }\n\n    /**\n     * dataDimensionExtents\n     * @desc Returns the the minimum and maximum values for each dimention in the data array.\n     * @param {array} data - data containing points\n     * @return {array} extents - min and max extents minx,miny,minz,maxx,maxy,maxz\n     * @example\n     * kmeans.data = [\n     *   2,5,1,\n     *   4,7,2,\n     *   3,1,3\n     * ];\n     * var extents = kmeans.dataDimensionExtents();\n     * console.log(extents); // [2,1,1, 4,7,3]\n     */\n\n    public dataDimensionExtents(data: Float32Array): number[] {\n        //data = data || this.data;\n        const extents = [\n            1000000, 1000000, 1000000, -1000000, -1000000, -1000000,\n        ];\n\n        for (let i = 0; i < data.length / 3; i++) {\n            const x = data[i * 3];\n            const y = data[i * 3 + 1];\n            const z = data[i * 3 + 2];\n            if (x < extents[0]) {\n                extents[0] = x;\n            }\n            if (x > extents[3]) {\n                extents[3] = x;\n            }\n            if (y < extents[1]) {\n                extents[1] = y;\n            }\n            if (y > extents[4]) {\n                extents[4] = y;\n            }\n            if (z < extents[2]) {\n                extents[2] = z;\n            }\n            if (z > extents[5]) {\n                extents[5] = z;\n            }\n        }\n\n        return extents;\n    }\n\n    /**\n     * dataExtentRanges\n     * @desc Returns the range for each extent\n     * @return {array} ranges\n     * kmeans.extents = [minx,miny.minz,maxx,maxy,maxz]\n     * var ranges = kmeans.dataExtentRanges(extents);\n     * console.log(ranges); // [2,6]\n     */\n    public dataExtentRanges(): number[] {\n        return [\n            this.extents[3] - this.extents[0],\n            this.extents[4] - this.extents[1],\n            this.extents[5] - this.extents[2],\n        ];\n    }\n\n    /**\n     * seeds\n     * @desc Returns an array of randomly generated cluster centroid points bounds based on the data dimension ranges.\n     * @return {array} cluster centroid points\n     * @example\n     * var means = kmeans.seeds();\n     * console.log(means); // [2,3,7, 4,5,2, 5,2,1]\n     */\n    public seeds(): Float32Array {\n        const means = new Float32Array(this.k * 3);\n        for (let i = 0; i < this.k; ++i) {\n            means[i * 3] = this.extents[0] + Math.random() * this.ranges[0];\n            means[i * 3 + 1] = this.extents[1] + Math.random() * this.ranges[1];\n            means[i * 3 + 2] = this.extents[2] + Math.random() * this.ranges[2];\n        }\n\n        return means;\n    }\n\n    public static randomSeeds(k: number, data: Float32Array): Float32Array {\n        // choose k random items from the original data set\n        const numItems = data.length / 3;\n        const selected: Set<number> = new Set();\n        while (\n            selected.add(Math.floor(Math.random() * numItems) | 0).size < k\n        ) {}\n        const items: number[] = [...selected];\n\n        const means = new Float32Array(k * 3);\n        for (let i = 0; i < k; ++i) {\n            // select a random point from our initial set\n            means[i * 3] = data[items[i] * 3];\n            means[i * 3 + 1] = data[items[i] * 3 + 1];\n            means[i * 3 + 2] = data[items[i] * 3 + 2];\n        }\n\n        return means;\n    }\n\n    /**\n     * assignClusterToDataPoints\n     * @desc Calculate Euclidean distance between each point and the cluster center.\n     * Assigns each point to closest mean point.\n     *\n     * The distance between two points is the length of the path connecting them.\n     * The distance between points P(p1,p2) and Q(q1,q2) is given by the Pythagorean theorem.\n     *\n     * distance = square root of ((p1 - q1)^2 + (p2 - q2)^2)\n     *\n     * For n dimensions, ie P(p1,p2,pn) and Q(q1,q2,qn).\n     * d(p,q) = square root of ((p1 - q1)^2 + (p2 - q2)^2 + ... + (pn - qn)^2)\n     *\n     * http://en.wikipedia.org/wiki/Euclidean_distance\n     */\n    public assignClusterToDataPoints(): void {\n        for (let i = 0; i < this.data.length / 3; i++) {\n            const x = this.data[i * 3];\n            const y = this.data[i * 3 + 1];\n            const z = this.data[i * 3 + 2];\n\n            // populate distance from point i to cluster j for all j.\n            for (let j = 0; j < this.means.length / 3; j++) {\n                const mx = this.means[j * 3];\n                const my = this.means[j * 3 + 1];\n                const mz = this.means[j * 3 + 2];\n\n                /* We calculate the Euclidean distance.\n                 * √((pi-qi)^2+...+(pn-qn)^2)\n                 */\n\n                const sum =\n                    (x - mx) * (x - mx) +\n                    (y - my) * (y - my) +\n                    (z - mz) * (z - mz);\n\n                // √sum\n                this.tmpDistances[j] = Math.sqrt(sum);\n            }\n\n            // After calculating all the distances from the data point to each cluster centroid,\n            // we pick the closest (smallest) distances.\n            const minReading = findMin(this.tmpDistances);\n            this.assignments[i] = this.tmpDistances.indexOf(minReading);\n        }\n    }\n\n    /**\n     * moveMeans\n     * @desc Update the positions of the the cluster centroids (means) to the average positions\n     * of all data points that belong to that mean.\n     */\n    public moveMeans(): boolean {\n        // sums are 3d points\n        const sums = new Float32Array(this.means.length).fill(0);\n        const counts = new Int32Array(this.means.length / 3).fill(0);\n        let moved = false;\n        let meanIndex;\n        let dim;\n\n        // For each cluster, get sum of point coordinates in every dimension.\n        for (\n            let pointIndex = 0;\n            pointIndex < this.assignments.length;\n            pointIndex++\n        ) {\n            meanIndex = this.assignments[pointIndex];\n            const px = this.data[pointIndex * 3];\n            const py = this.data[pointIndex * 3 + 1];\n            const pz = this.data[pointIndex * 3 + 2];\n\n            counts[meanIndex]++;\n\n            sums[meanIndex * 3] += px;\n            sums[meanIndex * 3 + 1] += py;\n            sums[meanIndex * 3 + 2] += pz;\n        }\n\n        /* If cluster centroid (mean) is not longer assigned to any points,\n         * move it somewhere else randomly within range of points.\n         */\n        for (meanIndex = 0; meanIndex < sums.length / 3; meanIndex++) {\n            if (0 === counts[meanIndex]) {\n                sums[meanIndex * 3] =\n                    this.extents[0] + Math.random() * this.ranges[0];\n                sums[meanIndex * 3 + 1] =\n                    this.extents[1] + Math.random() * this.ranges[1];\n                sums[meanIndex * 3 + 2] =\n                    this.extents[2] + Math.random() * this.ranges[2];\n                continue;\n            }\n\n            sums[meanIndex * 3] /= counts[meanIndex];\n            sums[meanIndex * 3] = Math.round(100 * sums[meanIndex * 3]) / 100;\n            sums[meanIndex * 3 + 1] /= counts[meanIndex];\n            sums[meanIndex * 3 + 1] =\n                Math.round(100 * sums[meanIndex * 3 + 1]) / 100;\n            sums[meanIndex * 3 + 2] /= counts[meanIndex];\n            sums[meanIndex * 3 + 2] =\n                Math.round(100 * sums[meanIndex * 3 + 2]) / 100;\n        }\n\n        /* If current means does not equal to new means, then\n         * move cluster centroid closer to average point.\n         */\n        // compare ALL the means to the sums.\n        if (!areArraysClose(this.means, sums, 0.01)) {\n            let diff;\n            moved = true;\n\n            // Nudge means 1/nth of the way toward average point.\n            for (meanIndex = 0; meanIndex < sums.length / 3; meanIndex++) {\n                for (dim = 0; dim < 3; dim++) {\n                    diff =\n                        sums[meanIndex * 3 + dim] -\n                        this.means[meanIndex * 3 + dim];\n                    if (Math.abs(diff) > 0.1) {\n                        const stepsPerIteration = 10;\n                        this.means[meanIndex * 3 + dim] +=\n                            diff / stepsPerIteration;\n                        this.means[meanIndex * 3 + dim] =\n                            Math.round(100 * this.means[meanIndex * 3 + dim]) /\n                            100;\n                    } else {\n                        this.means[meanIndex * 3 + dim] =\n                            sums[meanIndex * 3 + dim];\n                    }\n                }\n            }\n        }\n\n        return moved;\n    }\n\n    /**\n     * run\n     * @desc Reassigns nearest cluster centroids (means) to data points,\n     * and checks if cluster centroids (means) have moved, otherwise\n     * end program.\n     */\n    public run(): void {\n        let meansMoved = true;\n\n        // tune this value for performance vs quality\n        const maxIterations = 150;\n        // no kmeans call should take more than this amount of time\n        const timeLimitMs = 5000;\n\n        const startTimeMs = Date.now();\n        let time = 0;\n\n        do {\n            ++this.iterations;\n\n            // Reassign points to nearest cluster centroids.\n            this.assignClusterToDataPoints();\n\n            // Returns true if the cluster centroids have moved location since the last iteration.\n            meansMoved = this.moveMeans();\n\n            time = Date.now() - startTimeMs;\n        } while (\n            meansMoved &&\n            this.iterations < maxIterations &&\n            !(time > timeLimitMs)\n        );\n    }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = () => {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [\"vendors-node_modules_babel_runtime_regenerator_index_js-node_modules_babel_runtime_helpers_es-95eaa1\"], () => (__webpack_require__(\"./src/simularium/VisGeometry/KMeansWorker.ts\")))\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + chunkId + \".index.js\";\n};","// This function allow to reference all chunks\n__webpack_require__.miniCssF = (chunkId) => {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t\"src_simularium_VisGeometry_KMeansWorker_ts\": 1\n};\n\n// importScripts chunk loading\nvar installChunk = (data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = (chunkId, promises) => {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunk_aics_simularium_viewer\"] = self[\"webpackChunk_aics_simularium_viewer\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","var next = __webpack_require__.x;\n__webpack_require__.x = () => {\n\treturn __webpack_require__.e(\"vendors-node_modules_babel_runtime_regenerator_index_js-node_modules_babel_runtime_helpers_es-95eaa1\").then(next);\n};","","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n",""],"names":["Comlink","KMeans3d","KMeansWorker","k","sizes","data","results","i","length","km3","push","means","expose","areArraysClose","a","b","epsilon","Math","abs","findMin","arr","m","Number","MAX_VALUE","KMeans","opts","tmpDistances","Float32Array","assignments","Int32Array","extents","dataDimensionExtents","ranges","dataExtentRanges","randomSeeds","iterations","drawDelay","timer","run","x","y","z","random","j","mx","my","mz","sum","sqrt","minReading","indexOf","sums","fill","counts","moved","meanIndex","dim","pointIndex","px","py","pz","round","diff","stepsPerIteration","meansMoved","maxIterations","timeLimitMs","startTimeMs","Date","now","time","assignClusterToDataPoints","moveMeans","numItems","selected","Set","add","floor","size","items"],"sourceRoot":""}