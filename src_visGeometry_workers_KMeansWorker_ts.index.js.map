{"version":3,"file":"src_visGeometry_workers_KMeansWorker_ts.index.js","mappings":";;;;;;;;;;;;;;;;;;;;;;AAKA;AACA,SAASA,cAAcA,CAACC,CAAC,EAAEC,CAAC,EAAEC,OAAO,EAAW;EAC5C,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,CAAC,CAACI,MAAM,EAAE,EAAED,CAAC,EAAE;IAC/B,IAAIE,IAAI,CAACC,GAAG,CAACN,CAAC,CAACG,CAAC,CAAC,GAAGF,CAAC,CAACE,CAAC,CAAC,CAAC,GAAGD,OAAO,EAAE;MACjC,OAAO,KAAK;IAChB;EACJ;EACA,OAAO,IAAI;AACf;AAEA,SAASK,OAAOA,CAACC,GAAG,EAAU;EAC1B,IAAIC,CAAC,GAAGC,MAAM,CAACC,SAAS;EACxB,KAAK,IAAIR,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGK,GAAG,CAACJ,MAAM,EAAE,EAAED,CAAC,EAAE;IACjC,IAAIK,GAAG,CAACL,CAAC,CAAC,GAAGM,CAAC,EAAE;MACZA,CAAC,GAAGD,GAAG,CAACL,CAAC,CAAC;IACd;EACJ;EACA,OAAOM,CAAC;AACZ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA,IAaqBG,MAAM;EAYvB,SAAAA,OAAmBC,IAAmB,EAAE;IAAAC,iFAAA,OAAAF,MAAA;IAAAG,iFAAA;IAAAA,iFAAA;IAAAA,iFAAA;IAAAA,iFAAA;IAAAA,iFAAA;IAAAA,iFAAA;IAAAA,iFAAA;IAAAA,iFAAA;IAAAA,iFAAA;IAAAA,iFAAA;IACpC;IACA,IAAI,CAACC,CAAC,GAAGH,IAAI,CAACG,CAAC;;IAEf;IACA,IAAI,CAACC,YAAY,GAAG,IAAIC,YAAY,CAAC,IAAI,CAACF,CAAC,CAAC;;IAE5C;IACA,IAAI,CAACG,IAAI,GAAGN,IAAI,CAACM,IAAI;;IAErB;IACA;IACA,IAAI,CAACC,WAAW,GAAG,IAAIC,UAAU,CAAC,IAAI,CAACF,IAAI,CAACf,MAAM,GAAG,CAAC,CAAC;;IAEvD;IACA,IAAI,CAACkB,OAAO,GAAG,IAAI,CAACC,oBAAoB,CAAC,IAAI,CAACJ,IAAI,CAAC;;IAEnD;IACA,IAAI,CAACK,MAAM,GAAG,IAAI,CAACC,gBAAgB,CAAC,CAAC;;IAErC;IACA,IAAI,CAACC,KAAK,GAAGd,MAAM,CAACe,WAAW,CAAC,IAAI,CAACX,CAAC,EAAE,IAAI,CAACG,IAAI,CAAC;;IAElD;IACA,IAAI,CAACS,UAAU,GAAG,CAAC;;IAEnB;IACA,IAAI,CAACC,SAAS,GAAG,CAAC;;IAElB;IACA,IAAI,CAACC,KAAK,GAAG,CAAC,CAAC;IACf,IAAI,CAACC,GAAG,CAAC,CAAC;EACd;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAbIC,8EAAA,CAAApB,MAAA;IAAAqB,GAAA;IAAAC,KAAA,EAeA,SAAAX,qBAA4BJ,IAAkB,EAAY;MACtD;MACA,IAAMG,OAAO,GAAG,CACZ,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,OAAO,EAAE,CAAC,OAAO,EAAE,CAAC,OAAO,CAC1D;MAED,KAAK,IAAInB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGgB,IAAI,CAACf,MAAM,GAAG,CAAC,EAAED,CAAC,EAAE,EAAE;QACtC,IAAMgC,CAAC,GAAGhB,IAAI,CAAChB,CAAC,GAAG,CAAC,CAAC;QACrB,IAAMiC,CAAC,GAAGjB,IAAI,CAAChB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QACzB,IAAMkC,CAAC,GAAGlB,IAAI,CAAChB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QACzB,IAAIgC,CAAC,GAAGb,OAAO,CAAC,CAAC,CAAC,EAAE;UAChBA,OAAO,CAAC,CAAC,CAAC,GAAGa,CAAC;QAClB;QACA,IAAIA,CAAC,GAAGb,OAAO,CAAC,CAAC,CAAC,EAAE;UAChBA,OAAO,CAAC,CAAC,CAAC,GAAGa,CAAC;QAClB;QACA,IAAIC,CAAC,GAAGd,OAAO,CAAC,CAAC,CAAC,EAAE;UAChBA,OAAO,CAAC,CAAC,CAAC,GAAGc,CAAC;QAClB;QACA,IAAIA,CAAC,GAAGd,OAAO,CAAC,CAAC,CAAC,EAAE;UAChBA,OAAO,CAAC,CAAC,CAAC,GAAGc,CAAC;QAClB;QACA,IAAIC,CAAC,GAAGf,OAAO,CAAC,CAAC,CAAC,EAAE;UAChBA,OAAO,CAAC,CAAC,CAAC,GAAGe,CAAC;QAClB;QACA,IAAIA,CAAC,GAAGf,OAAO,CAAC,CAAC,CAAC,EAAE;UAChBA,OAAO,CAAC,CAAC,CAAC,GAAGe,CAAC;QAClB;MACJ;MAEA,OAAOf,OAAO;IAClB;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EAPI;IAAAW,GAAA;IAAAC,KAAA,EAQA,SAAAT,iBAAA,EAAoC;MAChC,OAAO,CACH,IAAI,CAACH,OAAO,CAAC,CAAC,CAAC,GAAG,IAAI,CAACA,OAAO,CAAC,CAAC,CAAC,EACjC,IAAI,CAACA,OAAO,CAAC,CAAC,CAAC,GAAG,IAAI,CAACA,OAAO,CAAC,CAAC,CAAC,EACjC,IAAI,CAACA,OAAO,CAAC,CAAC,CAAC,GAAG,IAAI,CAACA,OAAO,CAAC,CAAC,CAAC,CACpC;IACL;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EAPI;IAAAW,GAAA;IAAAC,KAAA,EAQA,SAAAI,MAAA,EAA6B;MACzB,IAAMZ,KAAK,GAAG,IAAIR,YAAY,CAAC,IAAI,CAACF,CAAC,GAAG,CAAC,CAAC;MAC1C,KAAK,IAAIb,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACa,CAAC,EAAE,EAAEb,CAAC,EAAE;QAC7BuB,KAAK,CAACvB,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAACmB,OAAO,CAAC,CAAC,CAAC,GAAGjB,IAAI,CAACkC,MAAM,CAAC,CAAC,GAAG,IAAI,CAACf,MAAM,CAAC,CAAC,CAAC;QAC/DE,KAAK,CAACvB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAACmB,OAAO,CAAC,CAAC,CAAC,GAAGjB,IAAI,CAACkC,MAAM,CAAC,CAAC,GAAG,IAAI,CAACf,MAAM,CAAC,CAAC,CAAC;QACnEE,KAAK,CAACvB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAACmB,OAAO,CAAC,CAAC,CAAC,GAAGjB,IAAI,CAACkC,MAAM,CAAC,CAAC,GAAG,IAAI,CAACf,MAAM,CAAC,CAAC,CAAC;MACvE;MAEA,OAAOE,KAAK;IAChB;EAAC;IAAAO,GAAA;IAAAC,KAAA;IAsBD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACI,SAAAM,0BAAA,EAAyC;MACrC,KAAK,IAAIrC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACgB,IAAI,CAACf,MAAM,GAAG,CAAC,EAAED,CAAC,EAAE,EAAE;QAC3C,IAAMgC,CAAC,GAAG,IAAI,CAAChB,IAAI,CAAChB,CAAC,GAAG,CAAC,CAAC;QAC1B,IAAMiC,CAAC,GAAG,IAAI,CAACjB,IAAI,CAAChB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAC9B,IAAMkC,CAAC,GAAG,IAAI,CAAClB,IAAI,CAAChB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;;QAE9B;QACA,KAAK,IAAIsC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACf,KAAK,CAACtB,MAAM,GAAG,CAAC,EAAEqC,CAAC,EAAE,EAAE;UAC5C,IAAMC,EAAE,GAAG,IAAI,CAAChB,KAAK,CAACe,CAAC,GAAG,CAAC,CAAC;UAC5B,IAAME,EAAE,GAAG,IAAI,CAACjB,KAAK,CAACe,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;UAChC,IAAMG,EAAE,GAAG,IAAI,CAAClB,KAAK,CAACe,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;;UAEhC;AAChB;AACA;;UAEgB,IAAMI,GAAG,GACL,CAACV,CAAC,GAAGO,EAAE,KAAKP,CAAC,GAAGO,EAAE,CAAC,GACnB,CAACN,CAAC,GAAGO,EAAE,KAAKP,CAAC,GAAGO,EAAE,CAAC,GACnB,CAACN,CAAC,GAAGO,EAAE,KAAKP,CAAC,GAAGO,EAAE,CAAC;;UAEvB;UACA,IAAI,CAAC3B,YAAY,CAACwB,CAAC,CAAC,GAAGpC,IAAI,CAACyC,IAAI,CAACD,GAAG,CAAC;QACzC;;QAEA;QACA;QACA,IAAME,UAAU,GAAGxC,OAAO,CAAC,IAAI,CAACU,YAAY,CAAC;QAC7C,IAAI,CAACG,WAAW,CAACjB,CAAC,CAAC,GAAG,IAAI,CAACc,YAAY,CAAC+B,OAAO,CAACD,UAAU,CAAC;MAC/D;IACJ;;IAEA;AACJ;AACA;AACA;AACA;EAJI;IAAAd,GAAA;IAAAC,KAAA,EAKA,SAAAe,UAAA,EAA4B;MACxB;MACA,IAAMC,IAAI,GAAG,IAAIhC,YAAY,CAAC,IAAI,CAACQ,KAAK,CAACtB,MAAM,CAAC,CAAC+C,IAAI,CAAC,CAAC,CAAC;MACxD,IAAMC,MAAM,GAAG,IAAI/B,UAAU,CAAC,IAAI,CAACK,KAAK,CAACtB,MAAM,GAAG,CAAC,CAAC,CAAC+C,IAAI,CAAC,CAAC,CAAC;MAC5D,IAAIE,KAAK,GAAG,KAAK;MACjB,IAAIC,SAAS;MACb,IAAIC,GAAG;;MAEP;MACA,KACI,IAAIC,UAAU,GAAG,CAAC,EAClBA,UAAU,GAAG,IAAI,CAACpC,WAAW,CAAChB,MAAM,EACpCoD,UAAU,EAAE,EACd;QACEF,SAAS,GAAG,IAAI,CAAClC,WAAW,CAACoC,UAAU,CAAC;QACxC,IAAMC,EAAE,GAAG,IAAI,CAACtC,IAAI,CAACqC,UAAU,GAAG,CAAC,CAAC;QACpC,IAAME,EAAE,GAAG,IAAI,CAACvC,IAAI,CAACqC,UAAU,GAAG,CAAC,GAAG,CAAC,CAAC;QACxC,IAAMG,EAAE,GAAG,IAAI,CAACxC,IAAI,CAACqC,UAAU,GAAG,CAAC,GAAG,CAAC,CAAC;QAExCJ,MAAM,CAACE,SAAS,CAAC,EAAE;QAEnBJ,IAAI,CAACI,SAAS,GAAG,CAAC,CAAC,IAAIG,EAAE;QACzBP,IAAI,CAACI,SAAS,GAAG,CAAC,GAAG,CAAC,CAAC,IAAII,EAAE;QAC7BR,IAAI,CAACI,SAAS,GAAG,CAAC,GAAG,CAAC,CAAC,IAAIK,EAAE;MACjC;;MAEA;AACR;AACA;MACQ,KAAKL,SAAS,GAAG,CAAC,EAAEA,SAAS,GAAGJ,IAAI,CAAC9C,MAAM,GAAG,CAAC,EAAEkD,SAAS,EAAE,EAAE;QAC1D,IAAI,CAAC,KAAKF,MAAM,CAACE,SAAS,CAAC,EAAE;UACzBJ,IAAI,CAACI,SAAS,GAAG,CAAC,CAAC,GACf,IAAI,CAAChC,OAAO,CAAC,CAAC,CAAC,GAAGjB,IAAI,CAACkC,MAAM,CAAC,CAAC,GAAG,IAAI,CAACf,MAAM,CAAC,CAAC,CAAC;UACpD0B,IAAI,CAACI,SAAS,GAAG,CAAC,GAAG,CAAC,CAAC,GACnB,IAAI,CAAChC,OAAO,CAAC,CAAC,CAAC,GAAGjB,IAAI,CAACkC,MAAM,CAAC,CAAC,GAAG,IAAI,CAACf,MAAM,CAAC,CAAC,CAAC;UACpD0B,IAAI,CAACI,SAAS,GAAG,CAAC,GAAG,CAAC,CAAC,GACnB,IAAI,CAAChC,OAAO,CAAC,CAAC,CAAC,GAAGjB,IAAI,CAACkC,MAAM,CAAC,CAAC,GAAG,IAAI,CAACf,MAAM,CAAC,CAAC,CAAC;UACpD;QACJ;QAEA0B,IAAI,CAACI,SAAS,GAAG,CAAC,CAAC,IAAIF,MAAM,CAACE,SAAS,CAAC;QACxCJ,IAAI,CAACI,SAAS,GAAG,CAAC,CAAC,GAAGjD,IAAI,CAACuD,KAAK,CAAC,GAAG,GAAGV,IAAI,CAACI,SAAS,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG;QACjEJ,IAAI,CAACI,SAAS,GAAG,CAAC,GAAG,CAAC,CAAC,IAAIF,MAAM,CAACE,SAAS,CAAC;QAC5CJ,IAAI,CAACI,SAAS,GAAG,CAAC,GAAG,CAAC,CAAC,GACnBjD,IAAI,CAACuD,KAAK,CAAC,GAAG,GAAGV,IAAI,CAACI,SAAS,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG;QACnDJ,IAAI,CAACI,SAAS,GAAG,CAAC,GAAG,CAAC,CAAC,IAAIF,MAAM,CAACE,SAAS,CAAC;QAC5CJ,IAAI,CAACI,SAAS,GAAG,CAAC,GAAG,CAAC,CAAC,GACnBjD,IAAI,CAACuD,KAAK,CAAC,GAAG,GAAGV,IAAI,CAACI,SAAS,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG;MACvD;;MAEA;AACR;AACA;MACQ;MACA,IAAI,CAACvD,cAAc,CAAC,IAAI,CAAC2B,KAAK,EAAEwB,IAAI,EAAE,IAAI,CAAC,EAAE;QACzC,IAAIW,IAAI;QACRR,KAAK,GAAG,IAAI;;QAEZ;QACA,KAAKC,SAAS,GAAG,CAAC,EAAEA,SAAS,GAAGJ,IAAI,CAAC9C,MAAM,GAAG,CAAC,EAAEkD,SAAS,EAAE,EAAE;UAC1D,KAAKC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAG,CAAC,EAAEA,GAAG,EAAE,EAAE;YAC1BM,IAAI,GACAX,IAAI,CAACI,SAAS,GAAG,CAAC,GAAGC,GAAG,CAAC,GACzB,IAAI,CAAC7B,KAAK,CAAC4B,SAAS,GAAG,CAAC,GAAGC,GAAG,CAAC;YACnC,IAAIlD,IAAI,CAACC,GAAG,CAACuD,IAAI,CAAC,GAAG,GAAG,EAAE;cACtB,IAAMC,iBAAiB,GAAG,EAAE;cAC5B,IAAI,CAACpC,KAAK,CAAC4B,SAAS,GAAG,CAAC,GAAGC,GAAG,CAAC,IAC3BM,IAAI,GAAGC,iBAAiB;cAC5B,IAAI,CAACpC,KAAK,CAAC4B,SAAS,GAAG,CAAC,GAAGC,GAAG,CAAC,GAC3BlD,IAAI,CAACuD,KAAK,CAAC,GAAG,GAAG,IAAI,CAAClC,KAAK,CAAC4B,SAAS,GAAG,CAAC,GAAGC,GAAG,CAAC,CAAC,GACjD,GAAG;YACX,CAAC,MAAM;cACH,IAAI,CAAC7B,KAAK,CAAC4B,SAAS,GAAG,CAAC,GAAGC,GAAG,CAAC,GAC3BL,IAAI,CAACI,SAAS,GAAG,CAAC,GAAGC,GAAG,CAAC;YACjC;UACJ;QACJ;MACJ;MAEA,OAAOF,KAAK;IAChB;;IAEA;AACJ;AACA;AACA;AACA;AACA;EALI;IAAApB,GAAA;IAAAC,KAAA,EAMA,SAAAH,IAAA,EAAmB;MACf,IAAIgC,UAAU,GAAG,IAAI;;MAErB;MACA,IAAMC,aAAa,GAAG,GAAG;MACzB;MACA,IAAMC,WAAW,GAAG,IAAI;MAExB,IAAMC,WAAW,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC;MAC9B,IAAIC,IAAI,GAAG,CAAC;MAEZ,GAAG;QACC,EAAE,IAAI,CAACzC,UAAU;;QAEjB;QACA,IAAI,CAACY,yBAAyB,CAAC,CAAC;;QAEhC;QACAuB,UAAU,GAAG,IAAI,CAACd,SAAS,CAAC,CAAC;QAE7BoB,IAAI,GAAGF,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGF,WAAW;MACnC,CAAC,QACGH,UAAU,IACV,IAAI,CAACnC,UAAU,GAAGoC,aAAa,IAC/B,EAAEK,IAAI,GAAGJ,WAAW,CAAC;IAE7B;EAAC;IAAAhC,GAAA;IAAAC,KAAA,EA1LD,SAAAP,YAA0BX,CAAS,EAAEG,IAAkB,EAAgB;MACnE;MACA,IAAMmD,QAAQ,GAAGnD,IAAI,CAACf,MAAM,GAAG,CAAC;MAChC,IAAMmE,QAAqB,GAAG,IAAIC,GAAG,CAAC,CAAC;MACvC,OACID,QAAQ,CAACE,GAAG,CAACpE,IAAI,CAACqE,KAAK,CAACrE,IAAI,CAACkC,MAAM,CAAC,CAAC,GAAG+B,QAAQ,CAAC,GAAG,CAAC,CAAC,CAACK,IAAI,GAAG3D,CAAC,EACjE,CAAC;MACH,IAAM4D,KAAe,GAAAC,oFAAA,CAAON,QAAQ,CAAC;MAErC,IAAM7C,KAAK,GAAG,IAAIR,YAAY,CAACF,CAAC,GAAG,CAAC,CAAC;MACrC,KAAK,IAAIb,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGa,CAAC,EAAE,EAAEb,CAAC,EAAE;QACxB;QACAuB,KAAK,CAACvB,CAAC,GAAG,CAAC,CAAC,GAAGgB,IAAI,CAACyD,KAAK,CAACzE,CAAC,CAAC,GAAG,CAAC,CAAC;QACjCuB,KAAK,CAACvB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAGgB,IAAI,CAACyD,KAAK,CAACzE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QACzCuB,KAAK,CAACvB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAGgB,IAAI,CAACyD,KAAK,CAACzE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;MAC7C;MAEA,OAAOuB,KAAK;IAChB;EAAC;EAAA,OAAAd,MAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;ACzLgC;AACF;AAEU;AAAA,IAEvCqE,YAAY;EAAA,SAAAA,aAAA;IAAAnE,iFAAA,OAAAmE,YAAA;EAAA;EAAAjD,8EAAA,CAAAiD,YAAA;IAAAhD,GAAA;IAAAC,KAAA;MAAA,IAAAgD,IAAA,GAAAC,mFAAA,eAAAC,sEAAA,CACd,SAAAE,QAAUtE,CAAC,EAAEuE,KAAK,EAAEpE,IAAI;QAAA,IAAAqE,OAAA,EAAArF,CAAA,EAAAsF,GAAA;QAAA,OAAAL,sEAAA,UAAAO,SAAAC,QAAA;UAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;YAAA;cACdN,OAAuB,GAAG,EAAE;cAClC,KAASrF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGoF,KAAK,CAACnF,MAAM,EAAE,EAAED,CAAC,EAAE;gBAC7BsF,GAAG,GAAG,IAAIT,2DAAQ,CAAC;kBAAEhE,CAAC,EAAEuE,KAAK,CAACpF,CAAC,CAAC;kBAAEgB,IAAI,EAAEA;gBAAK,CAAC,CAAC;gBACrDqE,OAAO,CAACO,IAAI,CAACN,GAAG,CAAC/D,KAAK,CAAC;cAC3B;cAAC,OAAAkE,QAAA,CAAAI,MAAA,WACMR,OAAO;YAAA;YAAA;cAAA,OAAAI,QAAA,CAAAK,IAAA;UAAA;QAAA,GAAAX,OAAA;MAAA,CACjB;MAAA,SAAAvD,IAAAmE,EAAA,EAAAC,GAAA,EAAAC,GAAA;QAAA,OAAAlB,IAAA,CAAAmB,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAAvE,GAAA;IAAA;EAAA;EAAA,OAAAkD,YAAA;AAAA;AAKLF,2CAAc,CAACE,YAAY,CAAC;;;;;;UClB5B;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;;;;WClCA;WACA;WACA;WACA;WACA,+BAA+B,wCAAwC;WACvE;WACA;WACA;WACA;WACA,iBAAiB,qBAAqB;WACtC;WACA;WACA,kBAAkB,qBAAqB;WACvC;WACA;WACA,KAAK;WACL;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;;;;WC3BA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,EAAE;WACF;;;;;WCRA;WACA;WACA;WACA;WACA;;;;;WCJA;WACA;WACA;WACA;WACA;;;;;WCJA;WACA;WACA;WACA;WACA,GAAG;WACH;WACA;WACA,CAAC;;;;;WCPD;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;WCNA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;;;;WClBA;;WAEA;WACA;WACA;WACA;WACA;;WAEA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,aAAa;WACb;WACA;WACA;WACA;;WAEA;WACA;WACA;;WAEA;;WAEA;;;;;WCpCA;WACA;WACA;WACA;;;;;UEHA;UACA","sources":["webpack://@aics/simularium-viewer/./src/visGeometry/rendering/KMeans3d.ts","webpack://@aics/simularium-viewer/./src/visGeometry/workers/KMeansWorker.ts","webpack://@aics/simularium-viewer/webpack/bootstrap","webpack://@aics/simularium-viewer/webpack/runtime/chunk loaded","webpack://@aics/simularium-viewer/webpack/runtime/compat get default export","webpack://@aics/simularium-viewer/webpack/runtime/define property getters","webpack://@aics/simularium-viewer/webpack/runtime/ensure chunk","webpack://@aics/simularium-viewer/webpack/runtime/get javascript chunk filename","webpack://@aics/simularium-viewer/webpack/runtime/get mini-css chunk filename","webpack://@aics/simularium-viewer/webpack/runtime/global","webpack://@aics/simularium-viewer/webpack/runtime/hasOwnProperty shorthand","webpack://@aics/simularium-viewer/webpack/runtime/make namespace object","webpack://@aics/simularium-viewer/webpack/runtime/publicPath","webpack://@aics/simularium-viewer/webpack/runtime/importScripts chunk loading","webpack://@aics/simularium-viewer/webpack/runtime/startup chunk dependencies","webpack://@aics/simularium-viewer/webpack/before-startup","webpack://@aics/simularium-viewer/webpack/startup","webpack://@aics/simularium-viewer/webpack/after-startup"],"sourcesContent":["interface KMeansOptions {\n    k: number;\n    data: Float32Array;\n}\n\n// assumes arrays of equal length\nfunction areArraysClose(a, b, epsilon): boolean {\n    for (let i = 0; i < a.length; ++i) {\n        if (Math.abs(a[i] - b[i]) > epsilon) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction findMin(arr): number {\n    let m = Number.MAX_VALUE;\n    for (let i = 0; i < arr.length; ++i) {\n        if (arr[i] < m) {\n            m = arr[i];\n        }\n    }\n    return m;\n}\n\n/**\n * KMeans\n *       This is a ported and optimized version of code explained here:\n *       https://miguelmota.com/blog/k-means-clustering-in-javascript/\n *       https://burakkanber.com/blog/machine-learning-k-means-clustering-in-javascript-part-1/\n *\n * @constructor\n * @desc KMeans constructor\n * @param {object} options - options object\n * @param {array} options.data - data array with points\n * @param {number} options.k - number of cluster centroids\n * @return array with arrays of points\n */\nexport default class KMeans {\n    public k: number;\n    public data: Float32Array;\n    public assignments: Int32Array;\n    public extents: number[];\n    public ranges: number[];\n    public means: Float32Array;\n    public iterations: number;\n    public drawDelay: number;\n    public timer: number;\n    private tmpDistances: Float32Array;\n\n    public constructor(opts: KMeansOptions) {\n        // Number of cluster centroids.\n        this.k = opts.k;\n\n        // one distance per cluster\n        this.tmpDistances = new Float32Array(this.k);\n\n        // Points to cluster.\n        this.data = opts.data;\n\n        // Keeps track of which cluster centroid index each data point belongs to.\n        // each point gets assigned to one cluster (an int between 0 and k-1)\n        this.assignments = new Int32Array(this.data.length / 3);\n\n        // Get the extents (min,max) for the dimensions.\n        this.extents = this.dataDimensionExtents(this.data);\n\n        // Get the range of the dimensions.\n        this.ranges = this.dataExtentRanges();\n\n        // Generate random cluster centroid points.\n        this.means = KMeans.randomSeeds(this.k, this.data);\n\n        // Keep track of number of times centroids move.\n        this.iterations = 0;\n\n        // Delay for each draw iteration.\n        this.drawDelay = 1;\n\n        // Perform work.\n        this.timer = -1;\n        this.run();\n    }\n\n    /**\n     * dataDimensionExtents\n     * @desc Returns the the minimum and maximum values for each dimention in the data array.\n     * @param {array} data - data containing points\n     * @return {array} extents - min and max extents minx,miny,minz,maxx,maxy,maxz\n     * @example\n     * kmeans.data = [\n     *   2,5,1,\n     *   4,7,2,\n     *   3,1,3\n     * ];\n     * var extents = kmeans.dataDimensionExtents();\n     * console.log(extents); // [2,1,1, 4,7,3]\n     */\n\n    public dataDimensionExtents(data: Float32Array): number[] {\n        //data = data || this.data;\n        const extents = [\n            1000000, 1000000, 1000000, -1000000, -1000000, -1000000,\n        ];\n\n        for (let i = 0; i < data.length / 3; i++) {\n            const x = data[i * 3];\n            const y = data[i * 3 + 1];\n            const z = data[i * 3 + 2];\n            if (x < extents[0]) {\n                extents[0] = x;\n            }\n            if (x > extents[3]) {\n                extents[3] = x;\n            }\n            if (y < extents[1]) {\n                extents[1] = y;\n            }\n            if (y > extents[4]) {\n                extents[4] = y;\n            }\n            if (z < extents[2]) {\n                extents[2] = z;\n            }\n            if (z > extents[5]) {\n                extents[5] = z;\n            }\n        }\n\n        return extents;\n    }\n\n    /**\n     * dataExtentRanges\n     * @desc Returns the range for each extent\n     * @return {array} ranges\n     * kmeans.extents = [minx,miny.minz,maxx,maxy,maxz]\n     * var ranges = kmeans.dataExtentRanges(extents);\n     * console.log(ranges); // [2,6]\n     */\n    public dataExtentRanges(): number[] {\n        return [\n            this.extents[3] - this.extents[0],\n            this.extents[4] - this.extents[1],\n            this.extents[5] - this.extents[2],\n        ];\n    }\n\n    /**\n     * seeds\n     * @desc Returns an array of randomly generated cluster centroid points bounds based on the data dimension ranges.\n     * @return {array} cluster centroid points\n     * @example\n     * var means = kmeans.seeds();\n     * console.log(means); // [2,3,7, 4,5,2, 5,2,1]\n     */\n    public seeds(): Float32Array {\n        const means = new Float32Array(this.k * 3);\n        for (let i = 0; i < this.k; ++i) {\n            means[i * 3] = this.extents[0] + Math.random() * this.ranges[0];\n            means[i * 3 + 1] = this.extents[1] + Math.random() * this.ranges[1];\n            means[i * 3 + 2] = this.extents[2] + Math.random() * this.ranges[2];\n        }\n\n        return means;\n    }\n\n    public static randomSeeds(k: number, data: Float32Array): Float32Array {\n        // choose k random items from the original data set\n        const numItems = data.length / 3;\n        const selected: Set<number> = new Set();\n        while (\n            selected.add(Math.floor(Math.random() * numItems) | 0).size < k\n        ) {}\n        const items: number[] = [...selected];\n\n        const means = new Float32Array(k * 3);\n        for (let i = 0; i < k; ++i) {\n            // select a random point from our initial set\n            means[i * 3] = data[items[i] * 3];\n            means[i * 3 + 1] = data[items[i] * 3 + 1];\n            means[i * 3 + 2] = data[items[i] * 3 + 2];\n        }\n\n        return means;\n    }\n\n    /**\n     * assignClusterToDataPoints\n     * @desc Calculate Euclidean distance between each point and the cluster center.\n     * Assigns each point to closest mean point.\n     *\n     * The distance between two points is the length of the path connecting them.\n     * The distance between points P(p1,p2) and Q(q1,q2) is given by the Pythagorean theorem.\n     *\n     * distance = square root of ((p1 - q1)^2 + (p2 - q2)^2)\n     *\n     * For n dimensions, ie P(p1,p2,pn) and Q(q1,q2,qn).\n     * d(p,q) = square root of ((p1 - q1)^2 + (p2 - q2)^2 + ... + (pn - qn)^2)\n     *\n     * http://en.wikipedia.org/wiki/Euclidean_distance\n     */\n    public assignClusterToDataPoints(): void {\n        for (let i = 0; i < this.data.length / 3; i++) {\n            const x = this.data[i * 3];\n            const y = this.data[i * 3 + 1];\n            const z = this.data[i * 3 + 2];\n\n            // populate distance from point i to cluster j for all j.\n            for (let j = 0; j < this.means.length / 3; j++) {\n                const mx = this.means[j * 3];\n                const my = this.means[j * 3 + 1];\n                const mz = this.means[j * 3 + 2];\n\n                /* We calculate the Euclidean distance.\n                 * √((pi-qi)^2+...+(pn-qn)^2)\n                 */\n\n                const sum =\n                    (x - mx) * (x - mx) +\n                    (y - my) * (y - my) +\n                    (z - mz) * (z - mz);\n\n                // √sum\n                this.tmpDistances[j] = Math.sqrt(sum);\n            }\n\n            // After calculating all the distances from the data point to each cluster centroid,\n            // we pick the closest (smallest) distances.\n            const minReading = findMin(this.tmpDistances);\n            this.assignments[i] = this.tmpDistances.indexOf(minReading);\n        }\n    }\n\n    /**\n     * moveMeans\n     * @desc Update the positions of the the cluster centroids (means) to the average positions\n     * of all data points that belong to that mean.\n     */\n    public moveMeans(): boolean {\n        // sums are 3d points\n        const sums = new Float32Array(this.means.length).fill(0);\n        const counts = new Int32Array(this.means.length / 3).fill(0);\n        let moved = false;\n        let meanIndex;\n        let dim;\n\n        // For each cluster, get sum of point coordinates in every dimension.\n        for (\n            let pointIndex = 0;\n            pointIndex < this.assignments.length;\n            pointIndex++\n        ) {\n            meanIndex = this.assignments[pointIndex];\n            const px = this.data[pointIndex * 3];\n            const py = this.data[pointIndex * 3 + 1];\n            const pz = this.data[pointIndex * 3 + 2];\n\n            counts[meanIndex]++;\n\n            sums[meanIndex * 3] += px;\n            sums[meanIndex * 3 + 1] += py;\n            sums[meanIndex * 3 + 2] += pz;\n        }\n\n        /* If cluster centroid (mean) is not longer assigned to any points,\n         * move it somewhere else randomly within range of points.\n         */\n        for (meanIndex = 0; meanIndex < sums.length / 3; meanIndex++) {\n            if (0 === counts[meanIndex]) {\n                sums[meanIndex * 3] =\n                    this.extents[0] + Math.random() * this.ranges[0];\n                sums[meanIndex * 3 + 1] =\n                    this.extents[1] + Math.random() * this.ranges[1];\n                sums[meanIndex * 3 + 2] =\n                    this.extents[2] + Math.random() * this.ranges[2];\n                continue;\n            }\n\n            sums[meanIndex * 3] /= counts[meanIndex];\n            sums[meanIndex * 3] = Math.round(100 * sums[meanIndex * 3]) / 100;\n            sums[meanIndex * 3 + 1] /= counts[meanIndex];\n            sums[meanIndex * 3 + 1] =\n                Math.round(100 * sums[meanIndex * 3 + 1]) / 100;\n            sums[meanIndex * 3 + 2] /= counts[meanIndex];\n            sums[meanIndex * 3 + 2] =\n                Math.round(100 * sums[meanIndex * 3 + 2]) / 100;\n        }\n\n        /* If current means does not equal to new means, then\n         * move cluster centroid closer to average point.\n         */\n        // compare ALL the means to the sums.\n        if (!areArraysClose(this.means, sums, 0.01)) {\n            let diff;\n            moved = true;\n\n            // Nudge means 1/nth of the way toward average point.\n            for (meanIndex = 0; meanIndex < sums.length / 3; meanIndex++) {\n                for (dim = 0; dim < 3; dim++) {\n                    diff =\n                        sums[meanIndex * 3 + dim] -\n                        this.means[meanIndex * 3 + dim];\n                    if (Math.abs(diff) > 0.1) {\n                        const stepsPerIteration = 10;\n                        this.means[meanIndex * 3 + dim] +=\n                            diff / stepsPerIteration;\n                        this.means[meanIndex * 3 + dim] =\n                            Math.round(100 * this.means[meanIndex * 3 + dim]) /\n                            100;\n                    } else {\n                        this.means[meanIndex * 3 + dim] =\n                            sums[meanIndex * 3 + dim];\n                    }\n                }\n            }\n        }\n\n        return moved;\n    }\n\n    /**\n     * run\n     * @desc Reassigns nearest cluster centroids (means) to data points,\n     * and checks if cluster centroids (means) have moved, otherwise\n     * end program.\n     */\n    public run(): void {\n        let meansMoved = true;\n\n        // tune this value for performance vs quality\n        const maxIterations = 150;\n        // no kmeans call should take more than this amount of time\n        const timeLimitMs = 5000;\n\n        const startTimeMs = Date.now();\n        let time = 0;\n\n        do {\n            ++this.iterations;\n\n            // Reassign points to nearest cluster centroids.\n            this.assignClusterToDataPoints();\n\n            // Returns true if the cluster centroids have moved location since the last iteration.\n            meansMoved = this.moveMeans();\n\n            time = Date.now() - startTimeMs;\n        } while (\n            meansMoved &&\n            this.iterations < maxIterations &&\n            !(time > timeLimitMs)\n        );\n    }\n}\n","import \"regenerator-runtime/runtime\";\nimport * as Comlink from \"comlink\";\n\nimport KMeans3d from \"../rendering/KMeans3d\";\n\nclass KMeansWorker {\n    async run(k, sizes, data) {\n        const results: Float32Array[] = [];\n        for (let i = 0; i < sizes.length; ++i) {\n            const km3 = new KMeans3d({ k: sizes[i], data: data });\n            results.push(km3.means);\n        }\n        return results;\n    }\n}\n\nexport type KMeansWorkerType = typeof KMeansWorker;\n\nComlink.expose(KMeansWorker);\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = () => {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [\"vendors-node_modules_regenerator-runtime_runtime_js-node_modules_babel_runtime_regenerator_in-ee803b\"], () => (__webpack_require__(\"./src/visGeometry/workers/KMeansWorker.ts\")))\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + chunkId + \".index.js\";\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.miniCssF = (chunkId) => {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && !scriptUrl) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t\"src_visGeometry_workers_KMeansWorker_ts\": 1\n};\n\n// importScripts chunk loading\nvar installChunk = (data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = (chunkId, promises) => {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunk_aics_simularium_viewer\"] = self[\"webpackChunk_aics_simularium_viewer\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","var next = __webpack_require__.x;\n__webpack_require__.x = () => {\n\treturn __webpack_require__.e(\"vendors-node_modules_regenerator-runtime_runtime_js-node_modules_babel_runtime_regenerator_in-ee803b\").then(next);\n};","","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n",""],"names":["areArraysClose","a","b","epsilon","i","length","Math","abs","findMin","arr","m","Number","MAX_VALUE","KMeans","opts","_classCallCheck","_defineProperty","k","tmpDistances","Float32Array","data","assignments","Int32Array","extents","dataDimensionExtents","ranges","dataExtentRanges","means","randomSeeds","iterations","drawDelay","timer","run","_createClass","key","value","x","y","z","seeds","random","assignClusterToDataPoints","j","mx","my","mz","sum","sqrt","minReading","indexOf","moveMeans","sums","fill","counts","moved","meanIndex","dim","pointIndex","px","py","pz","round","diff","stepsPerIteration","meansMoved","maxIterations","timeLimitMs","startTimeMs","Date","now","time","numItems","selected","Set","add","floor","size","items","_toConsumableArray","default","Comlink","KMeans3d","KMeansWorker","_run","_asyncToGenerator","_regeneratorRuntime","mark","_callee","sizes","results","km3","wrap","_callee$","_context","prev","next","push","abrupt","stop","_x","_x2","_x3","apply","arguments","expose"],"sourceRoot":""}