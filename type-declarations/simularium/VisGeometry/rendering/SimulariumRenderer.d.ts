import SSAO1Pass from "./SSAO";
import GBufferPass from "./GBufferPass";
import BlurPass from "./GaussianBlur";
import CompositePass from "./CompositePass";
import ContourPass from "./ContourPass";
import DrawBufferPass from "./DrawBufferPass";
import { InstancedFiberGroup } from "./InstancedFiber";
import { InstancedMesh } from "./InstancedMesh";
import { Color, Group, Scene, WebGLMultipleRenderTargets, WebGLRenderer, WebGLRenderTarget, PerspectiveCamera } from "three";
import * as dat from "dat.gui";
declare class SimulariumRenderer {
    gbufferPass: GBufferPass;
    ssao1Pass: SSAO1Pass;
    ssao2Pass: SSAO1Pass;
    blur1Pass: BlurPass;
    blur2Pass: BlurPass;
    compositePass: CompositePass;
    contourPass: ContourPass;
    drawBufferPass: DrawBufferPass;
    gbuffer: WebGLMultipleRenderTargets;
    private hitTestHelper;
    blurIntermediateBuffer: WebGLRenderTarget;
    ssaoBuffer: WebGLRenderTarget;
    ssaoBuffer2: WebGLRenderTarget;
    ssaoBufferBlurred: WebGLRenderTarget;
    ssaoBufferBlurred2: WebGLRenderTarget;
    private parameters;
    private boundsNear;
    private boundsFar;
    constructor();
    setupGui(gui: dat.GUI): void;
    setBackgroundColor(color: Color): void;
    setFollowedInstance(instance: number): void;
    hitTest(renderer: WebGLRenderer, x: number, y: number): number;
    updateColors(numColors: number, colorsData: Float32Array): void;
    setMeshGroups(instancedMeshGroup: Group, fibers: InstancedFiberGroup, meshTypes: InstancedMesh[]): void;
    resize(x: number, y: number): void;
    setNearFar(n: number, f: number): void;
    render(renderer: WebGLRenderer, scene: Scene, camera: PerspectiveCamera, target: WebGLRenderTarget | null): void;
}
export default SimulariumRenderer;
