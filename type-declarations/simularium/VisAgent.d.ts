import { Color, Curve, Group, Material, Object3D, SphereBufferGeometry, Vector3, WebGLRenderer } from "three";
import PDBModel from "./PDBModel";
export default class VisAgent {
    private static readonly UNASSIGNED_MESH_COLOR;
    static readonly UNASSIGNED_NAME_PREFIX = "Unassigned";
    static sphereGeometry: SphereBufferGeometry;
    static fiberEndcapGeometry: SphereBufferGeometry;
    private static followMaterial;
    private static membraneData;
    static updateMembrane(time: number, renderer: WebGLRenderer): void;
    mesh: Object3D;
    fiberCurve?: Curve<Vector3>;
    pdbModel?: PDBModel;
    pdbObjects: Object3D[];
    lod: number;
    typeId: number;
    colorIndex: number;
    active: boolean;
    baseMaterial: Material;
    highlightMaterial: Material;
    color: Color;
    name: string;
    followed: boolean;
    highlighted: boolean;
    hidden: boolean;
    visType: number;
    id: number;
    constructor(name: string);
    resetMesh(): void;
    resetPDB(): void;
    setColor(color: Color, colorIndex: number): void;
    setHidden(hidden: boolean): void;
    setFollowed(followed: boolean): void;
    setHighlighted(highlighted: boolean): void;
    private assignMaterial;
    assignMembraneMaterial(): void;
    signedTypeId(): number;
    private onAgentMeshBeforeRender;
    setupMeshGeometry(meshGeom: Object3D): void;
    setupPdb(pdb: PDBModel): void;
    selectLOD(index: number): void;
    setPDBInvisible(): void;
    renderAsMesh(): void;
    renderAsPDB(myDistance: number, distanceStops: number[], lodBias: number): void;
    hide(): void;
    hideAndDeactivate(): void;
    hasDrawablePDB(): boolean;
    updateFiber(subpoints: number[], collisionRadius: number, scale: number): void;
    static makeFiber(): Group;
    getFollowPosition(): Vector3;
}
